{"version":3,"sources":["Components/Bar/Bar.js","Components/Selector/Selector.js","utils/utils.js","Algorithms/bubbleSort.js","Components/Bars/Bars.js","Algorithms/mergeSort.js","Components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Bar","props","color","swap","compare","subArray","style","height","value","backgroundColor","className","id","defaultProps","Selector","onClick","resetArray","name","onChange","chooseAlgorithm","algorithm","setIntervalTime","sort","toggle","getRandomInt","min","max","Math","ceil","floor","random","isEqual","arr1","arr2","length","i","bubbleSort","array","index","setArray","setIndex","setCompare","setSwap","addSortedIndices","sortedIndices","currCompare","stop","bar","document","getElementById","borderBottom","lookedAt","newArray","j","swapBars","Bars","setState","display","merge","subarray_size","left_start","leftIndex","rightIndex","arrayIndex","left_sub","right_sub","state","stopAlgo","componentDidMount","e","automate","intervalTime","parseInt","target","success","startAlgo","running","intervals","setInterval","sortedArray","clearInterval","indices","stringAlgo","func","mergeSort","quickSort","insertionSort","size","mid","right_end","endLeft","endRight","L","R","push","setSubArray","setLeftSub","setRightSub","left","middle","right","setLeftIndex","setRightIndex","setArrayIndex","currCompared","compared","leftVal","rightVal","setLeftStart","setSubArraySize","leftStart","leftSub","rightSub","width","window","innerWidth","numBars","innerHeight","initArray","slice","a","b","sortArray","this","console","log","map","key","includes","React","Component","Navbar","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f9e5d65.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Bar.css';\n\nfunction Bar(props) {\n    let color;\n\n    if (props.swap) {\n        color = 'red';\n    } else if (props.compare) {\n        color = 'blueviolet';\n    } else if (props.subArray) {\n        color = 'gray';\n    } else {\n        color = 'skyblue';\n    }\n\n    const style = {\n        height: props.value,\n        backgroundColor: color,\n    };\n\n    return (\n        <div className=\"bar\" id={props.id} style={style}>\n            <div className=\"value\">{props.value}</div>\n        </div>\n    );\n}\n\nBar.defaultProps = {\n    value: 10,\n};\n\nBar.propTypes = {\n    id: PropTypes.number.isRequired,\n    swap: PropTypes.bool.isRequired,\n    compare: PropTypes.bool.isRequired,\n    subArray: PropTypes.bool.isRequired,\n};\n\nexport default Bar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Selector.css';\n\n// Renders List of Buttons for Controlling Sorting\nfunction Selector(props) {\n    return (\n        <div className=\"flex-container\">\n            {/* Generates New Array */}\n            <button className=\"button\" onClick={props.resetArray}>\n                Reset Array\n            </button>\n            {/* Selects Sorting Algorithm */}\n            <select\n                className=\"button\"\n                name=\"algorithm\"\n                onChange={props.chooseAlgorithm}\n            >\n                <option value=\"mergeSort\">Merge Sort</option>\n                <option value=\"bubbleSort\">Bubble Sort</option>\n                <option value=\"insertionSort\">Insertion Sort</option>\n                <option value=\"quickSort\">Quick Sort</option>\n            </select>\n            {/* Does One Step of the Algorithm */}\n            <button className=\"button\" onClick={props.algorithm}>\n                Step\n            </button>\n            {/* Sets Interval Time */}\n            <select\n                className=\"button\"\n                name=\"interval-time\"\n                onChange={props.setIntervalTime}\n            >\n                <option value={50}>Speedy Fast</option>\n                <option value={200}>Fast</option>\n                <option value={600}>Medium</option>\n                <option value={1000}>Slow</option>\n            </select>\n            {/* Runs Sorting Algorithm */}\n            <button className=\"button\" onClick={props.sort}>\n                {props.toggle ? 'Stop!' : 'Sort!'}\n            </button>\n        </div>\n    );\n}\n\nSelector.propTypes = {\n    setIntervalTime: PropTypes.func.isRequired,\n    sort: PropTypes.func.isRequired,\n    toggle: PropTypes.bool.isRequired,\n    algorithm: PropTypes.func.isRequired,\n    chooseAlgorithm: PropTypes.func.isRequired,\n    resetArray: PropTypes.func.isRequired,\n};\n\nexport default Selector;\n","// returns random integer from min to max\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    //The maximum is exclusive and the minimum is inclusive\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// returns array with random integers based on window height\n// and size based of width of window\nexport function initArray() {\n    // changes number of bars on refresh\n    const width = window.innerWidth;\n    const numBars = Math.floor(width / 50);\n    // changes height of bars on refresh\n    const min = window.innerHeight * 0.025;\n    const max = window.innerHeight * 0.6;\n\n    const array = [];\n    for (let i = 0; i < numBars; i++) {\n        array[i] = getRandomInt(min, max);\n    }\n\n    return array;\n}\n\n// checks if two arrays are equal\nexport function isEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// returns sorted array\nexport function sortArray(array) {\n    return array.slice().sort((a, b) => {\n        return a > b ? 1 : b > a ? -1 : 0;\n    });\n}\n\n// swaps two bars and returns array\nexport function swapBars(array, i, j) {\n    const value = array[i];\n    array[i] = array[j];\n    array[j] = value;\n    return array;\n}\n","import { swapBars } from '../utils/utils.js';\n\n// press button and move index and compare\n// only if we already performed action on current compare\n// we want to compare first, then operate\n// bubbleSort step wise\nfunction bubbleSort(\n    array,\n    index,\n    setArray,\n    setIndex,\n    setCompare,\n    setSwap,\n    addSortedIndices,\n    sortedIndices,\n    currCompare\n) {\n    // defines when we should stop\n    let stop = array.length - sortedIndices.length;\n\n    // reset index at end of array\n    if (index === stop - 2) {\n        setIndex(0);\n        // resets entirely if we do not\n        if (!(array[index] > array[index + 1])) {\n            setCompare(0, 1);\n        }\n        addSortedIndices(index + 1);\n\n        for (let i = 0; i < sortedIndices.length; i++) {\n            const bar = document.getElementById(`${sortedIndices[i]}`);\n            bar.style.borderBottom = '4px solid forestgreen';\n            bar.style.color = 'forestgreen';\n            bar.style.backgroundColor = 'skyblue';\n        }\n    }\n\n    const lookedAt = currCompare[0] === index && currCompare[1] === index + 1;\n\n    // clear swap\n    setSwap(-1, -1);\n\n    if (lookedAt) {\n        // swap or move on\n        if (array[index] > array[index + 1]) {\n            const newArray = swapBars(array, index, index + 1);\n            setSwap(index, index + 1);\n            setArray(newArray);\n        } else if (index !== stop - 2) {\n            // move on\n            setIndex(index + 1);\n            setCompare(index + 1, index + 2);\n        }\n    } else {\n        // look at\n        setCompare(index, index + 1);\n    }\n}\n\nexport default bubbleSort;\n","import React from 'react';\nimport './Bars.css';\nimport Bar from '../Bar/Bar.js';\nimport Selector from '../Selector/Selector.js';\nimport { initArray, sortArray, isEqual } from '../../utils/utils.js';\nimport bubbleSort from '../../Algorithms/bubbleSort.js';\nimport { merge } from '../../Algorithms/mergeSort.js';\n\nclass Bars extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // swap, compare hold indices of bars being swapped or compared at that instance\n        // running tells us if algorithm is running\n        this.state = {\n            algorithm: this.mergeSort, // stores algo to use\n            array: [], // current array\n            sortedArray: [], // sorted array for testing\n            index: 0, // where the algo is looking\n            // holds states for displaying features\n            display: {\n                swap: [], // which bars to display swapped\n                compare: [], // which bars to display compared\n                sortedIndices: [], // which bars are in final sorted place\n            },\n            // holds states for running algo\n            automate: {\n                intervalTime: 50, // how often steps are called (ms)\n                running: false, // if algo is running\n                intervals: null, // variable to hold interval (so algo can run)\n            },\n            // holds states necessary for merge sort\n            merge: {\n                subarray_size: 1,\n                left_start: 0,\n                leftIndex: 0,\n                rightIndex: 0,\n                arrayIndex: 0,\n                left_sub: [],\n                right_sub: [],\n                subArray: [] // holds indices of curr sub array\n            },\n        };\n    }\n\n    // runs before component renders\n    componentDidMount() {\n        const array = initArray();\n        const sortedArray = sortArray(array);\n        this.setState({\n            array: array,\n            sortedArray: sortedArray,\n        });\n    }\n\n    // resets all values\n    resetArray = () => {\n        this.setState({\n            index: 0,\n            display: {\n                swap: [],\n                compare: [],\n                sortedIndices: [],\n            },\n            merge: {\n                subarray_size: 1,\n                left_start: 0,\n                leftIndex: 0,\n                rightIndex: 0,\n                arrayIndex: 0,\n                left_sub: [],\n                right_sub: [],\n                subArray: [] // holds indices of curr sub array\n            },\n        });\n        for (let i = 0; i < this.state.array.length; i++) {\n            const bar = document.getElementById(`${i}`);\n            bar.style.borderBottom = '4px solid blueviolet';\n            bar.style.color = 'black';\n        }\n        this.stopAlgo();\n        this.componentDidMount();\n    };\n\n    // changes speed\n    setIntervalTime = (e) => {\n        const automate = this.state.automate;\n        automate.intervalTime = parseInt(e.target.value);\n        this.setState({ automate: automate });\n        this.stopAlgo();\n    };\n\n    // changes color of bars to success\n    // this cleans up any bars not set to green\n    success = () => {\n        for (let i = 0; i < this.state.array.length; i++) {\n            const bar = document.getElementById(`${i}`);\n            bar.style.borderBottom = '4px solid forestgreen';\n            bar.style.color = 'forestgreen';\n            bar.style.backgroundColor = 'skyblue';\n        }\n    };\n\n    // runs algorithm, stops when clicked twice\n    startAlgo = () => {\n        // ensures only one auto runs at a time\n        if (!this.state.automate.running) {\n            const automate = this.state.automate;\n            automate.running = true;\n            this.setState({ automate: automate });\n\n            const display = this.state.display;\n            display.intervals = setInterval(() => {\n                // stops when array is sorted, and we are back to start of array\n                // turns all bars green\n                const array = this.state.array;\n                const sortedArray = this.state.sortedArray;\n\n                if (isEqual(array, sortedArray) && this.state.index === 0) {\n                    this.stopAlgo();\n                    this.success();\n                } else {\n                    this.state.algorithm();\n                }\n            }, this.state.automate.intervalTime);\n\n            this.setState({ display: display });\n        }\n    };\n\n    stopAlgo = () => {\n        clearInterval(this.state.display.intervals);\n        const automate = this.state.automate;\n        automate.intervals = null;\n        automate.running = false;\n        this.setState({ automate: automate });\n    };\n\n    addSortedIndices = (i) => {\n        const indices = this.state.display.sortedIndices;\n        indices[indices.length] = i;\n        const display = this.state.display;\n        display.sortedIndices = indices;\n        this.setState({ display: display });\n    };\n\n    setIndex = (index) => {\n        this.setState({ index: index });\n    };\n\n    setArray = (array) => {\n        this.setState({ array: array });\n    };\n\n    // Changes algorithm chosen by users\n    chooseAlgorithm = (e) => {\n        const stringAlgo = e.target.value;\n        let func = this.mergeSort;\n\n        if (stringAlgo === 'quickSort') {\n            func = this.quickSort;\n        } else if (stringAlgo === 'insertionSort') {\n            func = this.insertionSort;\n        } else if (stringAlgo === 'bubbleSort') {\n            func = this.bubbleSort;\n        }\n\n        this.resetArray();\n        this.setState({ algorithm: func, index: 0 });\n    };\n\n    // performs a step of the function of bubbleSort\n    // we can pass in functions to set index and set array\n    bubbleSort = () => {\n        // so we can run steps after its sorted\n        if (\n            !isEqual(this.state.array, this.state.sortedArray) ||\n            this.state.index !== 0\n        ) {\n            bubbleSort(\n                this.state.array,\n                this.state.index,\n                this.setArray,\n                this.setIndex,\n                this.setCompare,\n                this.setSwap,\n                this.addSortedIndices,\n                this.state.display.sortedIndices,\n                this.state.display.compare\n            );\n        } else {\n            this.success();\n        }\n    };\n\n    insertionSort() {\n        console.log('in sort');\n    }\n\n    mergeSort = () => {\n        const array = this.state.array;\n        const size = this.state.array.length;\n\n        const subarray_size = this.state.merge.subarray_size;\n        let left_start = this.state.merge.left_start;\n\n        // checks if there is more sorting to do\n        if (subarray_size <= size - 1) {\n            // checks if current subarray size has been merged\n            // this works\n            if (left_start < size - 1) {\n                const mid = Math.min(left_start + subarray_size - 1, size - 1);\n\n                const right_end = Math.min(\n                    left_start + 2 * subarray_size - 1,\n                    size - 1\n                );\n\n                // for internal merging\n                const leftIndex = this.state.merge.leftIndex;\n                const rightIndex = this.state.merge.rightIndex;\n                // for defing when to stop merging\n                const endLeft = mid - left_start + 1;\n                const endRight = right_end - mid;\n\n                // only runs at every start of merge\n                if (\n                    this.state.merge.leftIndex === 0 &&\n                    this.state.merge.rightIndex === 0\n                ) {\n                    // needs to be here since the array is changing\n                    let L = [];\n                    let R = [];\n                    let subArray = [];\n\n                    // adds values from array into subarrays to be merged\n                    for (let i = 0; i < endLeft; i++) {\n                        L[i] = array[left_start + i];\n                        subArray.push(left_start + i);\n                    }\n                    for (let j = 0; j < endRight; j++) {\n                        R[j] = array[mid + 1 + j];\n                        subArray.push(mid + 1 + j);\n                    }\n\n                    this.setSubArray(subArray);\n                    this.setLeftSub(L);\n                    this.setRightSub(R);\n                }\n\n                if (leftIndex < endLeft || rightIndex < endRight) {\n                    merge(\n                        array,\n                        left_start,\n                        mid,\n                        right_end,\n                        this.state.merge.left_sub,\n                        this.state.merge.right_sub,\n                        this.state.merge.leftIndex,\n                        this.state.merge.rightIndex,\n                        this.state.merge.arrayIndex,\n                        this.setLeftIndex,\n                        this.setRightIndex,\n                        this.setArrayIndex,\n                        this.state.display.compare,\n                        this.setCompare,\n                        this.setSwap,\n                    );\n                } else {\n                    // for this only updated when merging is done\n                    this.setLeftIndex(0);\n                    this.setRightIndex(0);\n                    this.setArrayIndex(left_start + 2 * subarray_size);\n\n                    this.setSwap(-1, -1);\n                    this.setCompare(-1, -1);\n\n                    // move left start to next sub array pair\n                    this.setLeftStart(left_start + 2 * subarray_size);\n                }\n            } else {\n                // call success once done\n                if (subarray_size > (size - 1) / 2) {\n                    this.success();\n                }\n                // reset left start\n                this.setLeftStart(0);\n\n                this.setLeftIndex(0);\n                this.setRightIndex(0);\n                this.setArrayIndex(0);\n\n                this.setSubArraySize(subarray_size * 2);\n            }\n        } else {\n            // if user clicks after its sorted\n            this.success();\n        }\n\n        this.setArray(array);\n    };\n\n    setSubArray = (subArray) => {\n        const merge = this.state.merge;\n        merge.subArray = subArray;\n        this.setState({ merge: merge });\n    }\n\n    setSubArraySize = (size) => {\n        const merge = this.state.merge;\n        merge.subarray_size = size;\n        this.setState({ merge: merge });\n    };\n\n    setLeftStart = (leftStart) => {\n        const merge = this.state.merge;\n        merge.left_start = leftStart;\n        this.setState({ merge: merge });\n    };\n\n    setLeftIndex = (leftIndex) => {\n        const merge = this.state.merge;\n        merge.leftIndex = leftIndex;\n        this.setState({ merge: merge });\n    };\n\n    setRightIndex = (rightIndex) => {\n        const merge = this.state.merge;\n        merge.rightIndex = rightIndex;\n        this.setState({ merge: merge });\n    };\n\n    setLeftSub = (leftSub) => {\n        const merge = this.state.merge;\n        merge.left_sub = leftSub;\n        this.setState({ merge: merge });\n    };\n\n    setRightSub = (rightSub) => {\n        const merge = this.state.merge;\n        merge.right_sub = rightSub;\n        this.setState({ merge: merge });\n    };\n\n    setArrayIndex = (arrayIndex) => {\n        const merge = this.state.merge;\n        merge.arrayIndex = arrayIndex;\n        this.setState({ merge: merge });\n    };\n\n    quickSort() {\n        console.log('quick sort');\n    }\n\n    setCompare = (i, j) => {\n        const display = this.state.display;\n\n        let compare = [];\n        // so we can reset swap\n        if (i !== -1 && j !== -1) {\n            compare = [i, j];\n        }\n\n        display.compare = compare;\n        this.setState({ display: display });\n    };\n\n    setSwap = (i, j) => {\n        const display = this.state.display;\n\n        let swap = [];\n        // so we can reset swap\n        if (i !== -1 && j !== -1) {\n            swap = [i, j];\n        }\n\n        display.swap = swap;\n\n        this.setState({ display: display });\n    };\n\n    render() {\n        // maps bars from array\n        return (\n            <div>\n                <Selector\n                    sort={\n                        this.state.automate.running\n                            ? this.stopAlgo\n                            : this.startAlgo\n                    }\n                    toggle={this.state.automate.running}\n                    resetArray={this.resetArray}\n                    algorithm={this.state.algorithm}\n                    chooseAlgorithm={this.chooseAlgorithm}\n                    setIntervalTime={this.setIntervalTime}\n                />\n                <div className=\"bar-container\">\n                    {this.state.array.map((value, i) => (\n                        <Bar\n                            key={i}\n                            id={i}\n                            value={value}\n                            swap={this.state.display.swap.includes(i)}\n                            compare={this.state.display.compare.includes(i)}\n                            subArray={this.state.merge.subArray.includes(i)}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Bars;\n","// this performs merging of two arrays\nexport const merge = (\n    array,\n    left,\n    middle,\n    right,\n    L,\n    R,\n    leftIndex,\n    rightIndex,\n    arrayIndex,\n    setLeftIndex,\n    setRightIndex,\n    setArrayIndex,\n    currCompared,\n    setCompare,\n    setSwap\n) => {\n    // index of where to end subarrays\n    const endLeft = middle - left + 1;\n    const endRight = right - middle;\n\n    let value = array[arrayIndex];\n    let compare = [];\n    let compared = false;\n\n    // merges two arrays (except for largest values)\n    if (leftIndex < endLeft && rightIndex < endRight) {\n        const leftVal = L[leftIndex];\n        const rightVal = R[rightIndex];\n        compare = [arrayIndex, left + L.length + rightIndex];\n        setSwap(-1, -1);\n\n        if (currCompared[0] === compare[0] && currCompared[1] === compare[1]) {\n            compared = true;\n            // these are swaps\n            if (leftVal < rightVal) {\n                value = leftVal;\n                setLeftIndex(leftIndex + 1);\n            } else {\n                value = rightVal;\n                setRightIndex(rightIndex + 1);\n            }\n        }\n    } else if (leftIndex < endLeft) {\n        compared = true;\n        value = L[leftIndex];\n        setCompare(-1, -1);\n\n        setLeftIndex(leftIndex + 1);\n    } else if (rightIndex < endLeft) {\n        compared = true;\n        value = R[rightIndex];\n        setCompare(-1, -1);\n\n        setRightIndex(rightIndex + 1);\n    }\n\n    if (compared) {\n        array[arrayIndex] = value;\n        //array[] = \n\n        setSwap(arrayIndex, arrayIndex);\n        setArrayIndex(arrayIndex + 1);\n    } else {\n        setCompare(compare[0], compare[1]);\n    }\n};\n","import React from 'react';\nimport './Navbar.css';\n\nclass Navbar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return (\n            <div className=\"navbar\">\n                <h1>React Sorting Visualizer</h1>\n                <p>Created April 19th, 2020</p>\n            </div>\n        );\n    }\n}\n\nNavbar.defaultProps = {};\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Bars from './Components/Bars/Bars.js';\nimport Navbar from './Components/Navbar/Navbar.js';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar />\n            <Bars />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}